# -*- coding: utf-8 -*-
"""PEC3_VisualizacionDatos_Alberto_Mariscal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/153BZzZxwbm-WZR5S_2ZuU2IQwCcQ3G1w

**Storytelling Alberto Mariscal - Visualización de datos**

*Dataset Fifa 2019 Players*

1. Importamos la librerías necesarias
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy as sp
from scipy import stats
import re
from sklearn.preprocessing import OrdinalEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from PIL import Image
import warnings

"""2. Leemos el dataset"""

df = pd.read_csv("/content/sample_data/data_fifa.csv", error_bad_lines=False)
normalized_data = df
df.head()

col = df.columns
col



# Información del dataset
df.info()

# Observamos los valores para cada una de las columnas y así poder tener una historia global
df.describe()

"""3. Visualización de los datos"""

# Analizamos el número de jugadores por países
national_player = df[['Nationality',"ID"]].groupby(by=['Nationality'],as_index=False).count().sort_values("ID",ascending=False)
national_player.rename(columns = {'Nationality':"country", 'ID':'player_count'}, inplace = True)
national_player = national_player.reset_index()
national_player = national_player.drop(["index"], axis=1)
national_player.head(10)

# Visualizamos los datos anteriores para que sean más fáciles de entender
player_count = national_player.iloc[0:10,1]
national = national_player.iloc[0:10,0]

# select seaborn style of chart to make display more good for eyes.
plt.style.use("seaborn")
# create bar chart between most 10 country and no. of player 
plt.bar(national,player_count)
plt.xticks(rotation=45)
plt.title('Top 10 Country that have player in FIFA 19')
plt.show()

# Analizamos el número de jugadores por edad
player_age = df[['Age',"ID"]].groupby(by=['Age'],as_index=False).count().sort_values("ID",ascending=False)
player_age.rename(columns = {'ID':'count'}, inplace = True)
player_age = player_age.reset_index().drop(["index"], axis=1)
player_age.head()

# Mostramos el histograma de jugadores por edad
_,bins,_ = plt.hist(df.Age,bins=df.Age.max()-df.Age.min(),label="Age with no. of player")
mu, sigma = sp.stats.norm.fit(df.Age)
best_fit_line = sp.stats.norm.pdf(bins, mu, sigma)
plt.plot(bins, df.shape[0] * best_fit_line,label="fit_line",color="red")

plt.title('Distrbution of Age with players in FIFA 19')
plt.ylabel("no. of player")
plt.xlabel("Age of player")
plt.legend()
plt.show()

# Mostramos el número de jugadores por posición de campo
player_position = df[["Position","ID"]].groupby(by=['Position'],as_index=False).count().sort_values("ID",ascending=False)
player_position.rename(columns = {'ID':'count'}, inplace = True)
player_position = player_position.reset_index().drop(["index"], axis=1)
player_position.head()

# Mostramos el número de jugadores por posición de campo en un histograma
plt.figure(figsize=(15,7))
plt.bar(player_position["Position"],player_position["count"])
plt.xticks(rotation=70)
plt.title("Player's Position Distrbution", color="black")
plt.show()

# Mostramos un histograma del número de jugadores por puntuación global
plt.figure(figsize=(15, 7))
sns.countplot(df.Overall, label="overall_hist",color="#c81067")
plt.title("Overall rating distribution for all Player")
plt.legend()
plt.show()

# Creamos un scatterplot donde podamos ver la edad de los jugadores y la valoración global, indicando el color de la representación el potencial

sns.set(style="whitegrid")
sns.relplot(
    data = df,
    x="Age",y="Overall",hue="Potential")

# Observamos el número de jugadores por equipo
club_count = df['Club'].value_counts()
club_count = club_count[1:21]
plt.figure(figsize=(20,15))
sns.barplot(club_count.values,club_count.index,  alpha=0.8)
plt.title('Player Clubs')
plt.ylabel('Club', fontsize=12)
plt.xlabel('Players', fontsize=12)

"""3. Hacemos un análisis por ligas"""

SAF = ["Aldosivi", "Argentinos Jrs.", "Atlético Tucumán", "Banfield","Belgrano","Buenos Aires","Colón","Defensa","Estudiantes","Gimnasia","Godoy Cruz",
"Huracán","Independiente","Lanús","Newell's","Patronato","Racing Club","River Plate","Rosario Central","San Lorenzo","San Martín","SM Tucumán","Talleres",
"Tigre","Unión","Vélez Sarsfield", "Boca Juniors", "Club Atlético Huracán"]
HYUNDAI_A_LEAGUE = ["Adelaide United","Brisbane Roar","Central Coast","Melb. Victory","Melbourne City","Newcastle Jets","Perth Glory","Sydney FC","Well. Phoenix","WS Wanderers",
                    "Melbourne Victory"]
O_BUNDESLIGA = ["Admira Wacker","FK Austria Wien","Innsbruck","LASK Linz","RB Salzburg","SCR Altach","SK Rapid Wien","SK Sturm Graz","SKN St. Pölten","SV Mattersburg",
                "TSV Hartberg","Wolfsberger AC", "FC Red Bull Salzburg"]
PRO_LEAGUE = ["Cercle Brugge","Club Brugge","Excel Mouscron","KAA Gent","KAS Eupen","KRC Genk","KV Kortrijk","KV Oostende","Royal Antwerp FC","RSC Anderlecht",
              "Sint-Truiden","Sp. Charleroi","Sport. Lokeren","Standard Liège","Waasl. Beveren","Zulte-Waregem", "Club Brugge KV", "Standard de Liège"]
LIGA_DO_BRASIL = ["América""Atl. Paranaense","Atlético Mineiro","Bahia","Botafogo","Ceará SC","Chapecoense","Cruzeiro","Fluminense","Grêmio","Internacional","Paraná",
                  "Santos","Sport","Vitória"]
CAMP_SCOTIABANK = ["Audax Italiano","CD Antofagasta","CD Huachipato","CD O'Higgins","CD Palestino","CD Viñazur","Curicó Unido","Depor. Iquique","Deportes Temuco",
                   "Everton de Viña","San Luis","Uni. Católica","Uni. Concepción","Uni. de Chile","Unión Española","Unión La Calera"]
CSL = ["Beijing Guoan","Beijing Renhe","Changchun Yatai","Chongqing SWM","Dalian Yifang","Guangzhou","Guangzhou R&F","Guizhou Hengfeng","Hebei CFFC","Henan Jianye",
       "Jiangsu Suning","Shandong Luneng","Shanghai Shenhua","Shanghai SIPG","Tianjin Quanjian","Tianjin TEDA", "Guangzhou Evergrande Taobao FC", "Dalian YiFang FC",
       "Shanghai SIPG FC", "Beijing Sinobo Guoan FC", "Tianjin Quanjian FC", "Guangzhou R&F; FC", "Beijing Renhe FC", "Hebei China Fortune FC", "Jiangsu Suning FC",
       "Shanghai Greenland Shenhua FC", "Changchun Yatai FC", "Guizhou Hengfeng FC"]
LIGA_DIMAYOR = ["Al. Petrolera","América de Cali","Atl. Bucaramanga","Atl. Nacional","Atlético Huila","Boyacá Chicó","Deportes Tolima","Deportivo Cali",
                "Deportivo Pasto","Envigado","Ind. Santa Fe","Indep. Medellín","Jaguares","Junior","La Equidad","Leones","Millonarios","Once Caldas","Patriotas",
                "Rionegro Águilas"]
SUPERLIGA = ["Aalborg BK","Aarhus GF","AC Horsens","Brøndby IF","Esbjerg fB","FC København","FC Midtjylland","FC Nordsjælland","Hobro IK","Odense BK","Randers FC",
             "SønderjyskE","Vejle Boldklub","Vendsyssel FF"]
PREMIER_LEAGUE = ["Arsenal","Bournemouth","Brighton","Burnley","Cardiff City","Chelsea","Crystal Palace","Everton","Fulham","Huddersfield","Leicester City",
                  "Liverpool","Manchester City","Manchester United","Newcastle Utd","Southampton","Spurs","Watford","West Ham","Wolves", "Tottenham Hotspur", 
                  "West Ham United", "Wolverhampton Wanderers", "Brighton & Hove Albion", "Newcastle United", "Huddersfield Town"]
EFL_CHAMPIONSHIP = ["Aston Villa","Birmingham City","Blackburn Rovers","Bolton","Brentford","Bristol City","Derby County","Hull City","Ipswich","Leeds United",
                    "Middlesbrough","Millwall","Norwich","Nott'm Forest","Preston","QPR","Reading","Rotherham Utd","Sheffield Utd","Sheffield Wed","Stoke City",
                    "Swansea City","West Brom","Wigan Athletic", "West Bromwich Albion"]
EFL_LEAGUE_ONE = ["Accrington","AFC Wimbledon","Barnsley","Blackpool","Bradford City","Bristol Rovers","Burton Albion","Charlton Ath","Coventry City","Doncaster",
                  "Fleetwood Town","Gillingham","Luton Town","Oxford United","Peterborough","Plymouth Argyle","Portsmouth","Rochdale","Scunthorpe Utd","Shrewsbury",
                  "Southend United","Sunderland","Walsall","Wycombe"]
EFL_LEAGUE_TWO = ["Bury","Cambridge Utd","Carlisle United","Cheltenham Town","Colchester","Crawley Town","Crewe Alexandra","Exeter City",
                  "Forest Green","Grimsby Town","Lincoln City","Macclesfield","Mansfield Town","MK Dons","Morecambe","Newport County","Northampton",
                  "Notts County","Oldham Athletic","Port Vale","Stevenage","Swindon Town","Tranmere Rovers","Yeovil Town"]
LIGUE_1 = ["Amiens SC","Angers SCO","AS Monaco","ASSE","Dijon FCO","EA Guingamp","FC Nantes","Girondins de Bx","LOSC Lille","Montpellier HSC","Nîmes Olympique",
           "OGC Nice","OL","OM","Paris","RC Strasbourg","SM Caen","Stade de Reims","Stade Rennais","Toulouse FC", "Paris Saint-Germain", "Olympique Lyonnais","Olympique de Marseille",
           "AS Saint-Étienne", "Stade Rennais FC", "Stade Malherbe Caen", "Toulouse Football Club", "FC Girondins de Bordeaux"]
LIGUE_2 = ["AC Ajaccio","AJ Auxerre","AS Béziers","Chamois FC","Clermont Foot","ESTAC Troyes","FC Lorient","FC Metz","FCSM","Gazélec Ajaccio","Grenoble Foot",
           "Havre AC","La Berrichonne","Nancy","Paris FC","RC Lens","Red Star FC","Stade Brestois","US Orléans","Valenciennes FC"]
BUNDESLIGA = ["1. FC Nürnberg","1. FSV Mainz 05","Dortmund","Düsseldorf","FC Augsburg","FC Bayern","Frankfurt","Hannover 96","Hertha BSC","Leverkusen","M'gladbach",
              "RB Leipzig","SC Freiburg","Schalke","TSG Hoffenheim","VfB Stuttgart","VfL Wolfsburg","Werder Bremen", "FC Bayern München", "Borussia Dortmund","FC Schalke 04",
              "Bayer 04 Leverkusen", "1. FC Köln", "TSG 1899 Hoffenheim", "Borussia Mönchengladbach", "SV Werder Bremen", "Eintracht Frankfurt"]
BUNDESLIGA_2 = ["Aue","Bielefeld","Bochum","Darmstadt","Dresden","Duisburg","Fürth","Hamburg","Heidenheim","Ingolstadt","Kiel","Köln","Magdeburg","Paderborn","Regensburg",
                "Sandhausen","St. Pauli","Union Berlin", "Hamburger SV"]
Three_LIGA = ["1860 München","Braunschweig","Carl Zeiss Jena","Energie Cottbus","Fortuna Köln","FSV Zwickau","Hallescher FC","Hansa Rostock","Kaiserslautern","Karlsruher SC",
              "KFC Uerdingen","Preußen Münster","S. Großaspach","Sportfreunde Lotte","SV Meppen","SV Wehen","Unterhaching","VfL Osnabrück","VfR Aalen","Würzburg"]
SSE_AIRTRICITY_LEAGUE = ["Bohemian FC","Bray Wanderers","Cork City","Derry City","Dundalk","Limerick FC","Shamrock Rovers","Sligo Rovers","St. Pats","Waterford FC"]
SERIE_A_TIM = ["Atalanta","Bologna","Cagliari","Chievo Verona","Empoli","Fiorentina","Frosinone","Genoa","Inter","Juventus","Lazio","Milan","Napoli","Parma","Roma",
               "Sampdoria","Sassuolo","SPAL","Torino","Udinese"]
CALCIO_B = ["Ascoli","Benevento","Brescia", "Carpi", "Cittadella", "Cosenza", "Cremona", "Crotone","Foggia", "Hellas Verona","La Spezia", "Lecce", "Livorno", "Padova", 
            "Palermo", "Perugia", "Pescara", "Salerno","Venezia"]
MEIJI_YASUDAJ1 = ["Cerezo Osaka","F.C. Tokyo","Gamba Osaka","H.Consa.Sapporo","Júbilo Iwata","Kashima Antlers","Kashiwa Reysol","Kawasaki-F","Nagoya Grampus","Sagan Tosu",
                  "Shimizu S-Pulse","S-Hiroshima","Shonan Bellmare","Urawa Reds","Vegalta Sendai","Vissel Kobe","V-Varen Nagasaki","Yokohama F･M"]
KLEAGUE1 = ["Daegu FC","FC Seoul","Gangwon FC","Gyeongnam FC","Incheon United","Jeju United","Jeonbuk Hyundai","Jeonnam Dragons","Pohang Steelers","Sangju Sangmu",
            "Suwon Samsung","Ulsan Hyundai"]
LIGA_BANCOMER_MX = ["América","Atlas","Cruz Azul","Guadalajara","León","Lobos","Monarcas Morelia","Monterrey","Necaxa","Pachuca","Puebla","Querétaro","Santos Laguna",
                    "Tigres","Tijuana","Toluca","U.N.A.M.","Veracruz", "Tigres U.A.N.L.", "América FC (Minas Gerais)"]
EREDIVISIE = ["ADO Den Haag","Ajax","AZ","De Graafschap","Excelsior","FC Emmen","FC Groningen","FC Utrecht","Feyenoord","Fortuna Sittard","Heracles Almelo",
              "NAC Breda","PEC Zwolle","PSV","SC Heerenveen","Vitesse","VVV-Venlo","Willem II"]
ELITESERIEN = ["FK Bodø/Glimt","FK Haugesund","IK Start","Kristiansund","Lillestrøm SK","Molde FK","Odds BK","Ranheim Fotball","Rosenborg BK","Sandefjord","Sarpsborg 08 FF",
               "SK Brann","Stabæk Fotball","Strømsgodset IF","Tromsø IL","Vålerenga Fotball"]
EKSTRAKLASA = ["Arka Gdynia","Cracovia","Górnik Zabrze","Jagiellonia","Korona Kielce","Lech Poznań","Lechia Gdańsk","Legia Warszawa","Miedź Legnica","Piast Gliwice",
               "Pogoń Szczecin","Śląsk Wrocław","Wisła Kraków","Wisła Płock","Z. Sosnowiec","Zagłębie Lubin"]
LIGA_NOS = ["Belenenses","Boavista FC","CD Feirense","CD Tondela","Desportivo Aves","FC Porto","Funchal","GD Chaves","Marítimo","Moreirense FC","Portimonense SC",
            "Rio Ave FC","Santa Clara","SC Braga","SL Benfica","Sporting CP","V. Guimarães","V. Setúbal"]
REST_OF_WORLD = ["AEK Athens","CSKA Moscow","Dinamo Zagreb","Dynamo Kyiv","HJK Helsinki","Kaizer Chiefs","Lokomotiv Moscow","Olympiacos CFP","Orlando Pirates",
                 "Panathinaikos","PAOK","Shakhtar Donetsk","Slavia Praha","Sparta Praha","Spartak Moscow","Viktoria Plzeň", "PFC CSKA Moscow"]
SAUDI_PROFESSIONAL_LEAGUE = ["Al Ahli","Al Batin","Al Faisaly","Al Fateh","Al Fayha","Al Hazem","Al Hilal","Al Ittihad","Al Nassr","Al Qadisiyah","Al Raed",
                             "Al Shabab","Al Wehda","Al Taawoun","Ettifaq FC","Ohod Club"]
SCOTTISH_PREMIERSHIP = ["Aberdeen","Celtic","Dundee FC","Hamilton","Hearts","Hibernian","Kilmarnock","Livingston","Motherwell","Rangers","St. Johnstone","St. Mirren"]
LALIGA_SANTANDER = ["Athletic Club","Atlético Madrid","CD Leganés","D. Alavés","FC Barcelona","Getafe CF","Girona FC","Levante UD","R. Valladolid CF","Rayo Vallecano",
          "RC Celta","RCD Espanyol","Real Betis","Real Madrid","Real Sociedad","SD Eibar","SD Huesca","Sevilla FC","Valencia CF","Villarreal CF", "Athletic Club de Bilbao",
          "Deportivo Alavés", "Real Valladolid CF"]
LALIGA_123 = ["AD Alcorcón","Albacete BP","CA Osasuna","Cádiz CF","CD Lugo","CD Numancia","CD Tenerife","CF Rayo","CF Reus","Córdoba CF","Elche CF",
              "Extremadura UD","Granada CF","Málaga CF","Nàstic","R. Oviedo","R. Sporting","R. Zaragoza","RC Deportivo","RCD Mallorca","UD Almería","UD Las Palmas"]
ALLSVENSKAN = ["AIK","BK Häcken","Brommapojkarna","Dalkurd FF","Djurgårdens IF","GIF Sundsvall","Hammarby IF","IF Elfsborg","IFK Göteborg","IFK Norrköping","IK Sirius",
               "Kalmar FF","Malmö FF","Örebro SK","Östersunds FK","Trelleborgs FF"]
RAIFFEISEN_SUPER_LEAGUE = ["BSC Young Boys","FC Basel","FC Lugano","FC Luzern","FC Sion","FC St. Gallen","FC Thun","FC Zürich","Grasshopper Club","Neuchâtel Xamax", "FC Basel 1893"]
SUPER_LIG = ["Akhisarspor","Alanyaspor","Antalyaspor","Başakşehir","BB Erzurumspor","Beşiktaş","Bursaspor","Çaykur Rizespor","Fenerbahçe","Galatasaray","Göztepe",
             "Kasimpaşa","Kayserispor","Konyaspor","MKE Ankaragücü","Sivasspor","Trabzonspor","Yeni Malatyaspor", "Beşiktaş JK", "Medipol Başakşehir FK", "Galatasaray SK", 
             "Fenerbahçe SK", "Kasimpaşa SK"]
MLS = ["Atlanta United","Chicago Fire","Colorado Rapids","Columbus Crew SC","D.C. United","FC Dallas","Houston Dynamo","Impact Montréal","LAFC","LA Galaxy","Minnesota United",
       "New England","New York City FC","NY Red Bulls","Orlando City","Philadelphia","Portland Timbers","Real Salt Lake","Seattle Sounders","SJ Earthquakes","Sporting KC",
       "Toronto FC","Whitecaps FC", "Los Angeles FC", "Montreal Impact", "DC United", "Seattle Sounders FC"]

conditions = [(df['Club'].isin(SAF)),
              (df['Club'].isin(HYUNDAI_A_LEAGUE)),
              (df['Club'].isin(O_BUNDESLIGA)),
              (df['Club'].isin(PRO_LEAGUE)),
              (df['Club'].isin(LIGA_DO_BRASIL)),
              (df['Club'].isin(CAMP_SCOTIABANK)),
              (df['Club'].isin(CSL)),
              (df['Club'].isin(LIGA_DIMAYOR)),
              (df['Club'].isin(SUPERLIGA)),
              (df['Club'].isin(PREMIER_LEAGUE)),
              (df['Club'].isin(EFL_CHAMPIONSHIP)),
              (df['Club'].isin(EFL_LEAGUE_ONE)),
              (df['Club'].isin(EFL_LEAGUE_TWO)),
              (df['Club'].isin(LIGUE_1)),
              (df['Club'].isin(LIGUE_2)),
              (df['Club'].isin(BUNDESLIGA)),
              (df['Club'].isin(BUNDESLIGA_2)),
              (df['Club'].isin(Three_LIGA)),
              (df['Club'].isin(SSE_AIRTRICITY_LEAGUE)),
              (df['Club'].isin(SERIE_A_TIM)),
              (df['Club'].isin(CALCIO_B)),
              (df['Club'].isin(MEIJI_YASUDAJ1)),
              (df['Club'].isin(KLEAGUE1)),
              (df['Club'].isin(LIGA_BANCOMER_MX)),
              (df['Club'].isin(EREDIVISIE)),
              (df['Club'].isin(ELITESERIEN)),
              (df['Club'].isin(EKSTRAKLASA)),
              (df['Club'].isin(LIGA_NOS)),
              (df['Club'].isin(REST_OF_WORLD)),
              (df['Club'].isin(SAUDI_PROFESSIONAL_LEAGUE)),
              (df['Club'].isin(SCOTTISH_PREMIERSHIP)),
              (df['Club'].isin(LALIGA_SANTANDER)),
              (df['Club'].isin(LALIGA_123)),
              (df['Club'].isin(ALLSVENSKAN)),
              (df['Club'].isin(RAIFFEISEN_SUPER_LEAGUE)),
              (df['Club'].isin(SUPER_LIG)),
              (df['Club'].isin(MLS))
]
values = ['SAF', 'HYUNDAI A-LEAGUE', 'Ö. BUNDESLIGA', 'PRO LEAGUE', 'LIGA DO BRASIL', 'CAMP. SCOTIABANK', 'CSL', 'LIGA DIMAYOR', 'SUPERLIGA', 'PREMIER LEAGUE', 'EFL CHAMPIONSHIP',
          'EFL LEAGUE ONE', 'EFL LEAGUE TWO', 'LIGUE 1 CONFORAMA', "DOMINO'S LIGUE 2", 'BUNDESLIGA', 'BUNDESLIGA 2', '3. LIGA', 'SSE AIRTRICITY LEAGUE', 'SERIE A TIM', 'CALCIO B',
          'MEIJI YASUDA J1', 'K-LEAGUE 1', 'LIGA BANCOMER MX', 'EREDIVISIE', 'ELITESERIEN', 'EKSTRAKLASA', 'LIGA NOS', 'REST OF WORLD', 'SAUDI PROFESSIONAL LEAGUE', 'SCOTTISH PREMIERSHIP',
          'LALIGA SANTANDER', 'LALIGA 1 | 2 | 3', 'ALLSVENSKAN', 'RAIFFEISEN SUPER LEAGUE', 'SÜPER LIG', 'MLS'
          ]

df['League'] = np.select(conditions, values)

# Observamos el número de jugadores por liga
league_count = df['League'].value_counts()
league_count = league_count[1:6]
plt.figure(figsize=(10,5))
sns.barplot(league_count.index, league_count.values, alpha=0.8)
plt.title('No. of players in each league')
plt.ylabel('Number of Players', fontsize=12)
plt.xlabel('League', fontsize=12)

cal_df = df[['Name', 'Age','Overall', 'Potential', 'Club', 'Value',
       'Wage','League' ]]
cal_df

cal_df['Value'] = cal_df['Value'].replace({'K': '*1e3', 'M': '*1e6', '€':''}, regex=True).map(pd.eval).astype(int)
cal_df['Wage'] = cal_df['Wage'].replace({'K': '*1e3', 'M': '*1e6', '€':''}, regex=True).map(pd.eval).astype(int)

cal_df2 = cal_df.groupby(["League"]).Value.sum().reset_index()
cal_df2 = cal_df2.sort_values('Value', ascending=False)

cal_df2 = cal_df2.drop(0)
cal_df2 = cal_df2.reset_index()
cal_df2 = cal_df2.drop(columns=['index'], axis=1)

f, ax = plt.subplots(figsize=(18, 16))
sns.barplot(x="Value", y="League", data=cal_df2)
plt.title('player valuation of each league')
plt.show()

"""4. Scouting"""

from sklearn.preprocessing import MinMaxScaler

speciality_conditions = [
    ((((df['Finishing'] > 85) & (df['HeadingAccuracy'] > 85) & (df['Work Rate'] != 'High/ High') & (df['Work Rate'] != 'High/ Low') & (df['Work Rate'] != 'High/ Medium')) 
     & (((df['LongShots'] > 80) & (df['Finishing'] > 86)) | ((df['SprintSpeed'] > 90) & (df['Acceleration'] > 90)) | ((df['HeadingAccuracy'] > 75) & (df['Jumping'] > 85) & (df['Strength'] > 85)) |
        ((df['Dribbling'] > 86) & (df['Balance'] > 75)) | ((df['Strength'] > 86) & (df['Weight'] > '182lbs')))) | (((df['LongShots'] > 80) & (df['Finishing'] > 86)) & 
        (((df['SprintSpeed'] > 90) & (df['Acceleration'] > 90)) | ((df['HeadingAccuracy'] > 75) & (df['Jumping'] > 85) & (df['Strength'] > 85)) 
        | ((df['Dribbling'] > 86) & (df['Balance'] > 75)) | ((df['Strength'] > 86) & (df['Weight'] > '182lbs'))))),
    (((df['ShortPassing'] > 86) & (df['LongPassing'] > 73) & (df['Vision'] > 86)) & (((df['Stamina'] > 86) & (df['Work Rate'] == 'High/ High')) 
    | ((df['Crossing'] > 86) & (df['Curve'] > 80)) | ((df['Dribbling'] > 86) & (df['Balance'] > 75)) | ((df['LongShots'] > 87) & (df['ShotPower'] > 87)) 
    | ((df['FKAccuracy'] > 86) & (df['Curve'] > 85) & (df['ShotPower'] > 85)) | ((df['LongShots'] > 80) & (df['Finishing'] > 86)) 
    | ((df['StandingTackle'] > 86) & (df['SlidingTackle'] > 85)))),
    (((df['StandingTackle'] > 86) & (df['SlidingTackle'] > 85)) & (((df['Agility'] > 86) & (df['Reactions'] > 80)) | ((df['Strength'] > 86) & (df['Weight'] > '182lbs')) 
    | ((df['HeadingAccuracy'] > 75) & (df['Jumping'] > 85) & (df['Strength'] > 85)))),
    (df['Finishing'] > 85) & (df['HeadingAccuracy'] > 85) & (df['Work Rate'] != 'High/ High') & (df['Work Rate'] != 'High/ Low') & (df['Work Rate'] != 'High/ Medium'),
    (df['LongShots'] > 87) & (df['ShotPower'] > 87),
    (df['LongShots'] > 80) & (df['Finishing'] > 86),
    (df['HeadingAccuracy'] > 75) & (df['Jumping'] > 85) & (df['Strength'] > 85), 
    (df['FKAccuracy'] > 86) & (df['Curve'] > 85) & (df['ShotPower'] > 85),
    (df['Dribbling'] > 86) & (df['Balance'] > 75),
    (df['ShortPassing'] > 86) & (df['LongPassing'] > 73) & (df['Vision'] > 86),
    (df['Crossing'] > 86) & (df['Curve'] > 80),
    (df['Stamina'] > 86) & (df['Work Rate'] == 'High/ High'),
    (df['StandingTackle'] > 86) & (df['SlidingTackle'] > 85),
    (df['SprintSpeed'] > 90) & (df['Acceleration'] > 90),
    (df['Strength'] > 86) & (df['Weight'] > '182lbs'),
    (df['Interceptions'] > 86) & (df['Reactions'] > 80),
    (df['Agility'] > 86) & (df['Reactions'] > 80),
    (df['Position'] == 'GK')]

speciality_values = ['Complete Forward', 'Complete Midfielder', 'Complete Defender', 'Poacher', 'Distance Shooter', 'Clinical Finisher', 'Aerial Threat', 'Free Kick Specialist', 'Dribbler', 'Playmaker', 'Crosser', 'Engine', 
                     'Tackler', 'Speedster', 'Strength', 'Tactician', 'Acrobat', 'Goalkeeper'  ]

df['Speciality'] = np.select(speciality_conditions, speciality_values)

normalized_data = df

#normalized_data = normalized_data.drop(columns=['Age', 'Nationality', 'Overall', 'Potential', 'Club', 'Value',
#       'Wage', 'Preferred Foot', 'International Reputation', 'Weak Foot',
#       'Skill Moves', 'Work Rate', 'Position', 'Jersey Number', 'Joined',
#       'Loaned From', 'Contract Valid Until', 'Release Clause', 'League','Height', 'Weight', 'Speciality', 'Name', 'GKDiving', 'GKHandling',
#       'GKKicking', 'GKPositioning', 'GKReflexes', 'Photo', 'Flag', 'Club Logo'],axis=1)

normalized_data2 = normalized_data[['Crossing',	'Finishing',	'HeadingAccuracy',	'ShortPassing',	'Volleys',	'Dribbling',	'Curve',	'FKAccuracy',	'LongPassing',	'LongShots',	'Aggression',	'Interceptions',	'Positioning',	'Vision',	'Penalties'	,'Composure'	,'Marking',	'StandingTackle',	'SlidingTackle']]

scaler = MinMaxScaler()
scaled_values = scaler.fit_transform(normalized_data2)
normalized_data2.loc[:,:] = scaled_values
normalized_data2['Name'] = df['Name']
col_name = "Name"
first_col = normalized_data2.pop(col_name)
normalized_data2.insert(0, col_name, first_col)
normalized_data = normalized_data2.dropna()
normalized_data

from sklearn.metrics.pairwise import cosine_similarity
from math import pi

def get_similar_players(player_name):
  player_index = [list(normalized_data['Name']).index(x) for x in list(normalized_data['Name']) if player_name in x]
  player_index = int(player_index[0])
  # print(player_index)
  df = normalized_data.iloc[:,1:]
  cos = cosine_similarity(df, df)
  player_cos = sorted(list(cos[player_index]))[-4:-1]
  indexes = [list(cos[player_index]).index(x) for x in player_cos]
  indexes.append(player_index)
  plot_df = normalized_data.iloc[indexes]
  plot_df1 = plot_df
  plot_df1.reset_index(drop=True, inplace=True)
  plot_df1.reindex(index=range(0,5))
  plot_categories = list(plot_df1)[1:]
  plot_values = plot_df1.mean().values.flatten().tolist()
  plot_values += values[:1]
  angles = [n/ float(len(plot_categories)) *2 * pi for n in range(len(plot_categories))]
  angles += angles[:1]
  fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(15, 10),subplot_kw=dict(polar=True))
  plt.xticks(angles[:-1], plot_categories, color='grey', size=12)
  plt.yticks(np.arange(0.0, 1.2,0.2), ['0', '20','40','60','80','100'],color='grey', size=12)
  plt.ylim(0, 1)
  ax.set_rlabel_position(30)
  for i in range(len(plot_df1)):
    val_c1 = plot_df1.loc[i].drop('Name').values.flatten().tolist()
    val_c1 += val_c1[:1]
    ax.plot(angles, val_c1, linewidth=1.5, linestyle='solid',label=plot_df1.loc[i]["Name"])
    ax.fill(angles, val_c1, alpha=0.1)
  plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))
  return player_cos, normalized_data.iloc[indexes], plt.show()

from ipywidgets import interact
interact(get_similar_players, player_name = normalized_data2.Name)

